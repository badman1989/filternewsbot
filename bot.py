import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from telethon import TelegramClient, events
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = int(os.getenv("TELEGRAM_API_ID"))
API_HASH = os.getenv("TELEGRAM_API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
TARGET_CHANNEL_ID = os.getenv("TELEGRAM_CHAT_ID")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "channels_and_blacklist.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"channels": [], "blacklist": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

data = load_data()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–ª—å—Ç—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤.")

@dp.message(Command("add_channel"))
async def add_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_channel @channel")
        return
    channel = args[1]
    if channel not in data["channels"]:
        data["channels"].append(channel)
        save_data(data)
        await message.answer(f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("remove_channel"))
async def remove_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove_channel @channel")
        return
    channel = args[1]
    if channel in data["channels"]:
        data["channels"].remove(channel)
        save_data(data)
        await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–≠—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("list_channels"))
async def list_channels(message: Message):
    if data["channels"]:
        await message.answer("üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(data["channels"]))
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")

@dp.message(Command("add_word"))
async def add_word(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_word —Å–ª–æ–≤–æ")
        return
    word = args[1].lower()
    if word not in data["blacklist"]:
        data["blacklist"].append(word)
        save_data(data)
        await message.answer(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    else:
        await message.answer("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("remove_word"))
async def remove_word(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove_word —Å–ª–æ–≤–æ")
        return
    word = args[1].lower()
    if word in data["blacklist"]:
        data["blacklist"].remove(word)
        save_data(data)
        await message.answer(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer("–≠—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("list_words"))
async def list_words(message: Message):
    if data["blacklist"]:
        await message.answer("üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(data["blacklist"]))
    else:
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

@client.on(events.NewMessage)
async def handler(event):
    if event.chat and event.chat.username:
        channel_name = f"@{event.chat.username}"
        if channel_name in data["channels"]:
            if not any(word in event.raw_text.lower() for word in data["blacklist"]):
                caption = f"{event.raw_text}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {channel_name}"
                if event.photo:
                    photo = await event.download_media()
                    await bot.send_photo(TARGET_CHANNEL_ID, FSInputFile(photo), caption=caption)
                elif event.video:
                    video = await event.download_media()
                    await bot.send_video(TARGET_CHANNEL_ID, FSInputFile(video), caption=caption)
                elif event.document:
                    document = await event.download_media()
                    await bot.send_document(TARGET_CHANNEL_ID, FSInputFile(document), caption=caption)
                else:
                    await bot.send_message(TARGET_CHANNEL_ID, caption)

async def main():
    await client.start()
    logger.info("‚úÖ Telethon —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!")
    await dp.start_polling(bot)
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
