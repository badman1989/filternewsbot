import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from telethon import TelegramClient, events
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")
POST_CHANNEL_ID = int(os.getenv("TELEGRAM_CHAT_ID"))  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon-–∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient("news_session", API_ID, API_HASH)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–Ω–∞–ª–æ–≤ –∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
subscribed_channels = set()
blacklist_words = {"–ø–æ–ª–∏—Ç–∏–∫–∞", "—Å–∫–∞–Ω–¥–∞–ª", "–≤–æ–π–Ω–∞"}  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å

# ============================
#  –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î
# ============================

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–ª—å—Ç—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤.\n\n"
        "üì¢ –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚ûï `/add_channel @username` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "üìú `/list_channels` ‚Äì —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚ùå `/remove_channel @username` ‚Äì —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "üõë `/add_word —Å–ª–æ–≤–æ` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –ß–°\n"
        "‚úÖ `/remove_word —Å–ª–æ–≤–æ` ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –ß–°\n"
        "üìú `/list_words` ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤"
    )

@dp.message(Command("add_channel"))
async def add_channel(message: Message):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: `/add_channel @news_channel`")
        return
    
    channel_username = args[1]
    subscribed_channels.add(channel_username)
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")

@dp.message(Command("list_channels"))
async def list_channels(message: Message):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ """
    if not subscribed_channels:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        channels = "\n".join(subscribed_channels)
        await message.answer(f"üì¢ –ú–æ–Ω–∏—Ç–æ—Ä—é —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n{channels}")

@dp.message(Command("remove_channel"))
async def remove_channel(message: Message):
    """ –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `/remove_channel @news_channel`")
        return
    
    channel_username = args[1]
    if channel_username in subscribed_channels:
        subscribed_channels.remove(channel_username)
        await message.answer(f"üóëÔ∏è –ö–∞–Ω–∞–ª {channel_username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# ============================
#  –ß–Å–†–ù–´–ô –°–ü–ò–°–û–ö –°–õ–û–í
# ============================

@dp.message(Command("add_word"))
async def add_word(message: Message):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `/add_word —Å–∫–∞–Ω–¥–∞–ª`")
        return
    
    word = args[1].lower()
    blacklist_words.add(word)
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ `{word}` –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!")

@dp.message(Command("remove_word"))
async def remove_word(message: Message):
    """ –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ """
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: `/remove_word —Å–∫–∞–Ω–¥–∞–ª`")
        return
    
    word = args[1].lower()
    if word in blacklist_words:
        blacklist_words.remove(word)
        await message.answer(f"üóëÔ∏è –°–ª–æ–≤–æ `{word}` —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer(f"‚ùå –°–ª–æ–≤–∞ `{word}` –Ω–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("list_words"))
async def list_words(message: Message):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ """
    if not blacklist_words:
        await message.answer("üì≠ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        words = "\n".join(blacklist_words)
        await message.answer(f"üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words}")

# ============================
#  –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ï–ô (TELETHON)
# ============================

@client.on(events.NewMessage)
async def news_handler(event):
    """ –§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª """
    if event.chat and event.chat.username and f"@{event.chat.username}" in subscribed_channels:
        message_text = event.raw_text.lower()

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤
        if any(word in message_text for word in blacklist_words):
            logging.info(f"‚ùå –ü–æ—Å—Ç –∏–∑ {event.chat.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Ñ–∏–ª—å—Ç—Ä)")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(POST_CHANNEL_ID, f"üì¢ –ù–æ–≤–æ—Å—Ç—å –∏–∑ {event.chat.username}:\n\n{event.raw_text}")

# ============================
#  –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================

async def main():
    async with client:
        await client.start()
        logging.info("‚úÖ Telethon —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Aiogram –∏ Telethon –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        await asyncio.gather(
            dp.start_polling(bot),
            client.run_until_disconnected()
        )

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
