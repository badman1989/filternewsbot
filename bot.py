import os
import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from telethon import TelegramClient, events
from telethon.sessions import StringSession
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = int(os.getenv("TELEGRAM_API_ID"))
API_HASH = os.getenv("TELEGRAM_API_HASH")
SESSION_STRING = os.getenv("SESSION_STRING")
TARGET_CHANNEL_ID = os.getenv("TELEGRAM_CHAT_ID")

if not SESSION_STRING:
    raise ValueError("‚ùå SESSION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏ auth.py –∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ Railway.")

# –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "channels_and_blacklist.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"channels": [], "blacklist": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

data = load_data()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Telethon
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

# aiogram –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def start(message: Message):
    logger.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.username}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–ª—å—Ç—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤.")

@dp.message(Command("list_channels"))
async def list_channels(message: Message):
    logger.info(f"üì© –ö–æ–º–∞–Ω–¥–∞ /list_channels –æ—Ç {message.from_user.username}")
    if not data["channels"]:
        await message.answer("üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
    else:
        await message.answer("üì¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(data["channels"]))

@dp.message(Command("add_channel"))
async def add_channel(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_channel @channel")
        return
    channel = parts[1]
    if channel not in data["channels"]:
        data["channels"].append(channel)
        save_data(data)
        await message.answer(f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")

@dp.message(Command("remove_channel"))
async def remove_channel(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /remove_channel @channel")
        return
    channel = parts[1]
    if channel in data["channels"]:
        data["channels"].remove(channel)
        save_data(data)
        await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–≠—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

# Telethon –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@client.on(events.NewMessage)
async def handler(event):
    for channel in data["channels"]:
        if event.chat and event.chat.username == channel.replace("@", ""):
            if any(word in event.raw_text.lower() for word in data["blacklist"]):
                return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            
            caption = f"{event.raw_text}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: @{event.chat.username}"
            
            if event.photo:
                photo = await event.download_media()
                await bot.send_photo(TARGET_CHANNEL_ID, types.FSInputFile(photo), caption=caption)
            elif event.video:
                video = await event.download_media()
                await bot.send_video(TARGET_CHANNEL_ID, types.FSInputFile(video), caption=caption)
            elif event.document:
                document = await event.download_media()
                await bot.send_document(TARGET_CHANNEL_ID, types.FSInputFile(document), caption=caption)
            else:
                await bot.send_message(TARGET_CHANNEL_ID, text=caption)

async def main():
    await client.start()
    logger.info("‚úÖ Telethon —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!")
    await dp.start_polling(bot)
    await client.run_until_disconnected()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
