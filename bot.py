import os
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from telethon import TelegramClient, events
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")
POST_CHANNEL_ID = int(os.getenv("TELEGRAM_CHAT_ID"))  # –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon-–∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º bot_token)
client = TelegramClient("bot_session", API_ID, API_HASH).start(bot_token=API_TOKEN)

# ============================
#  –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
# ============================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"channels": [], "blacklist": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

data = load_data()

# ============================
#  –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê
# ============================

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ–∏–ª—å—Ç—Ä—É—é –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É —Å–ª–æ–≤.\n\n"
        "üì¢ –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚ûï `/add_channel @username` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "üìú `/list_channels` ‚Äì —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚ùå `/remove_channel @username` ‚Äì —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
        "üõë `/add_word —Å–ª–æ–≤–æ` ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –ß–°\n"
        "‚úÖ `/remove_word —Å–ª–æ–≤–æ` ‚Äì —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –ß–°\n"
        "üìú `/list_words` ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤"
    )

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.message(Command("add_channel"))
async def add_channel(message: Message):
    if len(message.text.split()) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/add_channel @news`")
    
    channel = message.text.split()[1]
    if channel in data["channels"]:
        return await message.answer("üîπ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")

    data["channels"].append(channel)
    save_data(data)
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω!")

# ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.message(Command("remove_channel"))
async def remove_channel(message: Message):
    if len(message.text.split()) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/remove_channel @news`")
    
    channel = message.text.split()[1]
    if channel not in data["channels"]:
        return await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

    data["channels"].remove(channel)
    save_data(data)
    await message.answer(f"‚ùå –ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω!")

# üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
@dp.message(Command("list_channels"))
async def list_channels(message: Message):
    if not data["channels"]:
        return await message.answer("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
    
    channels = "\n".join(data["channels"])
    await message.answer(f"üìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n{channels}")

# üõë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –ß–°
@dp.message(Command("add_word"))
async def add_word(message: Message):
    if len(message.text.split()) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/add_word –≤–æ–π–Ω–∞`")
    
    word = message.text.split()[1].lower()
    if word in data["blacklist"]:
        return await message.answer("üîπ –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ –ß–°.")

    data["blacklist"].append(word)
    save_data(data)
    await message.answer(f"üõë –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ß–°!")

# ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –ß–°
@dp.message(Command("remove_word"))
async def remove_word(message: Message):
    if len(message.text.split()) < 2:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/remove_word –≤–æ–π–Ω–∞`")
    
    word = message.text.split()[1].lower()
    if word not in data["blacklist"]:
        return await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –ß–°.")

    data["blacklist"].remove(word)
    save_data(data)
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ß–°!")

# üìú –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
@dp.message(Command("list_words"))
async def list_words(message: Message):
    if not data["blacklist"]:
        return await message.answer("‚ö†Ô∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    
    words = ", ".join(data["blacklist"])
    await message.answer(f"üìú –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤:\n{words}")

# ============================
#  –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø
# ============================

@client.on(events.NewMessage())
async def handler(event):
    chat = await event.get_chat()
    if f"@{chat.username}" not in data["channels"]:
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –≤ —Å–ø–∏—Å–∫–µ

    message_text = event.raw_text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
    if any(word in message_text for word in data["blacklist"]):
        logging.info(f"üö´ –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.username}: {event.raw_text[:50]}...")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä, –ø—É–±–ª–∏–∫—É–µ–º –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ
    await bot.send_message(POST_CHANNEL_ID, event.raw_text)
    logging.info(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat.username}: {event.raw_text[:50]}...")

# ============================
#  –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ============================

async def main():
    logging.info("‚úÖ Telethon —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ bot_token!")
    await asyncio.gather(
        dp.start_polling(bot),
        client.run_until_disconnected()
    )

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
