import os
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from telethon import TelegramClient, events
from dotenv import load_dotenv

# === –ó–ê–ì–†–£–ñ–ê–ï–ú .env ===
load_dotenv()

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_ID = os.getenv("TELEGRAM_API_ID")
API_HASH = os.getenv("TELEGRAM_API_HASH")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not API_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")

print(f"‚úÖ –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(API_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"‚úÖ –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): {API_TOKEN[:10]}...")

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ë–û–¢–ê ===
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# === TELETHON CLIENT ===
client = TelegramClient("news_bot", API_ID, API_HASH)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
db = sqlite3.connect("news.db")
cursor = db.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        source TEXT,
        message_id INTEGER,
        text TEXT UNIQUE
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS blacklist (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        word TEXT UNIQUE
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS channels (
        id INTEGER PRIMARY KEY
    )
""")
db.commit()

# === –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ß–ï–†–ù–û–ì–û –°–ü–ò–°–ö–ê ===
def is_blacklisted(text):
    cursor.execute("SELECT word FROM blacklist")
    blacklist_words = [row[0] for row in cursor.fetchall()]
    return any(word.lower() in text.lower() for word in blacklist_words)

# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò ===
@dp.message(commands=['add_channel'])
async def add_channel(message: Message):
    chat_id = message.text.split(maxsplit=1)[-1].strip()
    if not chat_id.startswith('-100'):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100).")
        return

    cursor.execute("INSERT OR IGNORE INTO channels (id) VALUES (?)", (int(chat_id),))
    db.commit()
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

@dp.message(commands=['remove_channel'])
async def remove_channel(message: Message):
    chat_id = message.text.split(maxsplit=1)[-1].strip()
    cursor.execute("DELETE FROM channels WHERE id = ?", (int(chat_id),))
    db.commit()
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {chat_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

@dp.message(commands=['list_channels'])
async def list_channels(message: Message):
    cursor.execute("SELECT id FROM channels")
    channels = [row[0] for row in cursor.fetchall()]
    if channels:
        await message.answer("üì¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤:\n" + "\n".join(map(str, channels)))
    else:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ö–ê–ù–ê–õ–û–í ===
cursor.execute("SELECT id FROM channels")
CHANNELS = [row[0] for row in cursor.fetchall()]

@client.on(events.NewMessage(chats=CHANNELS))
async def news_handler(event):
    if event.is_channel:
        text = event.message.text or ""
        if is_blacklisted(text):
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        
        cursor.execute("SELECT * FROM news WHERE text = ?", (text,))
        if cursor.fetchone():
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        cursor.execute("INSERT INTO news (source, message_id, text) VALUES (?, ?, ?)",
                       (event.chat.title, event.message.id, text))
        db.commit()
        
        await bot.send_message(CHAT_ID, f"üì∞ <b>{event.chat.title}</b>\n{text}")

# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ß–ï–†–ù–´–ú –°–ü–ò–°–ö–û–ú ===
@dp.message(commands=['add_blacklist'])
async def add_blacklist(message: Message):
    word = message.text.split(maxsplit=1)[-1].strip()
    if not word:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    cursor.execute("INSERT OR IGNORE INTO blacklist (word) VALUES (?)", (word,))
    db.commit()
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!")

@dp.message(commands=['remove_blacklist'])
async def remove_blacklist(message: Message):
    word = message.text.split(maxsplit=1)[-1].strip()
    cursor.execute("DELETE FROM blacklist WHERE word = ?", (word,))
    db.commit()
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞!")

@dp.message(commands=['show_blacklist'])
async def show_blacklist(message: Message):
    cursor.execute("SELECT word FROM blacklist")
    words = [row[0] for row in cursor.fetchall()]
    if words:
        await message.answer("üö´ –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: " + ", ".join(words))
    else:
        await message.answer("‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
